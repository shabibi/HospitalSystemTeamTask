AddPatient:
{
    "UserName": "JohnDoe",
    "Password": "Secure123!",
    "Email": "john.doe@example.com",
    "Phone": "1234567890",
    "Age": 30,
    "Gender": "M"
}

{
    "UserName": "JohnDoe",
    "Password": "Secure123!",
    "Phone": "1234567890",
    "Age": 30,
    "Gender": "Male"
}
{
    "UserName": "JohnDoe",
    "Password": "Secure123!",
    "Email": "john.doe.com",
    "Phone": "1234567890",
    "Age": 30,
    "Gender": "Male"
}

UpdatePatientDetails:

UID = 0
{
    "Phone": "9876543210",
    "Password": "NewPassword123!"
}


GetPatientById:
PID = 0


AddClinic:
Missing Required Fields (ClinicName)
{
  "depID": 2,
  "assignDoctor": 10,
  "bid": 1,
  "clincName": "",
  "capacity": 11,
  "startTime": "5:00:00",
  "endTime": "8:00:00",
  "cost": 13,
  "isActive": true
}

Invalid Capacity:

{
  "depID": 2,
  "assignDoctor": 10,
  "bid": 1,
  "clincName": "x",
  "capacity": -11,
  "startTime": "5:00:00",
  "endTime": "8:00:00",
  "cost": 13,
  "isActive": true
}

GetClinicByID:

CID = 0

GetClinicByName:
ClinicName = "Unknown Clinic"

GetClinicsByDepartmentID:
DepId = -1



branch_service_test_cases:

1. Test AddBranch (Successful case)
   - Input: BranchDTO { BranchName = "Test Branch", Location = "Test Location" }
   - Expected Output: "Branch added successfully"


2. Test GetAllBranches (Successful case)
   - Input: None
   - Expected Output: List of all branches


3. Test GetBranchDetailsByBranchName (Branch found)
   - Input: branchName = "Test Branch"
   - Expected Output: BranchDTO { BranchName = "Test Branch", Location = "Test Location", BranchStatus = true }


4. Test GetBranchDetailsByBranchName (Branch not found)
   - Input: branchName = "Nonexistent Branch"
   - Expected Output: KeyNotFoundException with message "Branch with name 'Nonexistent Branch' not found."


5. Test UpdateBranch (Successful update)
   - Input: branchId = 1, UpdateBranchDTO { BranchName = "Updated Branch", Location = "Updated Location" }
   - Expected Output: "Branch with ID '1' updated successfully."


6. Test UpdateBranch (Branch not found)
   - Input: branchId = 999, UpdateBranchDTO { BranchName = "Updated Branch", Location = "Updated Location" }
   - Expected Output: KeyNotFoundException with message "Branch with ID '999' not found."


7. Test SetBranchStatus (Set active status)
   - Input: branchId = 1, isActive = true
   - Expected Output: "Branch with ID '1' status updated to Active."


8. Test SetBranchStatus (Branch not found)
   - Input: branchId = 999, isActive = false
   - Expected Output: KeyNotFoundException with message "Branch with ID '999' not found."


9. Test GetBranchDetails (Get by branchId)
   - Input: branchId = 1
   - Expected Output: BranchDTO { BranchName = "Test Branch", Location = "Test Location", BranchStatus = true }


10. Test GetBranchDetails (Branch not found by branchId)
    - Input: branchId = 999
    - Expected Output: KeyNotFoundException with message "Branch not found."


11. Test GetBranchName (Successful case)
    - Input: branchId = 1
    - Expected Output: "Test Branch"


12. Test GetBranchName (Branch not found)
    - Input: branchId = 999
    - Expected Output: InvalidOperationException with message "Database error: Branch not found."






department_service_test_cases

Test Case 1: CreateDepartment - Success
Description: Create a new department.
Test Steps:
1. Create a DepartmentDTO with valid details.
2. Call the CreateDepartment method of DepartmentService with the DTO.
3. Assert that the department is successfully created.
Expected Result: The department is created successfully.

Test Case 2: CreateDepartment - Invalid Data (Missing Department Name)
Description: Try creating a department with a missing department name.
Test Steps:
1. Create a DepartmentDTO with missing department name.
2. Call the CreateDepartment method of DepartmentService with the invalid DTO.
3. Assert that the method throws an error related to validation.
Expected Result: Validation error for missing department name.

Test Case 3: UpdateDepartment - Success
Description: Update an existing department.
Test Steps:
1. Create a DepartmentDTO with valid updated details.
2. Call the UpdateDepartment method of DepartmentService with the department ID and updated DTO.
3. Assert that the department is updated successfully.
Expected Result: The department is updated successfully.

Test Case 4: UpdateDepartment - Department Not Found
Description: Try updating a department that does not exist.
Test Steps:
1. Call the UpdateDepartment method with a non-existing department ID and valid DTO.
2. Assert that a KeyNotFoundException is thrown.
Expected Result: KeyNotFoundException is thrown.

Test Case 5: GetAllDepartments - Success
Description: Retrieve a list of all departments.
Test Steps:
1. Call the GetAllDepartments method of DepartmentService.
2. Assert that the method returns a list of departments.
Expected Result: A list of departments is returned.

Test Case 6: GetDepartmentByName - Success
Description: Retrieve a department by name.
Test Steps:
1. Create a department with a known name.
2. Call the GetDepartmentByName method of DepartmentService with the department name.
3. Assert that the correct department is returned.
Expected Result: The department with the provided name is returned.

Test Case 7: GetDepartmentByName - Department Not Found
Description: Try retrieving a department that does not exist.
Test Steps:
1. Call the GetDepartmentByName method with a non-existing department name.
2. Assert that the method returns null or throws a KeyNotFoundException.
Expected Result: KeyNotFoundException is thrown.

Test Case 8: SetDepartmentActiveStatus - Success
Description: Set the status of a department.
Test Steps:
1. Call the SetDepartmentActiveStatus method with a valid department ID and true value for isActive.
2. Assert that the department's status is updated to active.
Expected Result: Department status is updated to active.

Test Case 9: SetDepartmentActiveStatus - Department Not Found
Description: Try setting the status for a non-existing department.
Test Steps:
1. Call the SetDepartmentActiveStatus method with a non-existing department ID.
2. Assert that a KeyNotFoundException is thrown.
Expected Result: KeyNotFoundException is thrown.

Test Case 10: SetDepartmentActiveStatus - Invalid Status
Description: Try setting an invalid status (not active or inactive).
Test Steps:
1. Call the SetDepartmentActiveStatus method with an invalid value for isActive.
2. Assert that the method throws an error.
Expected Result: An error is thrown due to invalid status.
